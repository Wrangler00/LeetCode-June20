Design a data structure that supports all following operations in average O(1) time.

insert(val): Inserts an item val to the set if not already present.
remove(val): Removes an item val from the set if present.
getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.
Example:

// Init an empty set.
RandomizedSet randomSet = new RandomizedSet();

// Inserts 1 to the set. Returns true as 1 was inserted successfully.
randomSet.insert(1);

// Returns false as 2 does not exist in the set.
randomSet.remove(2);

// Inserts 2 to the set, returns true. Set now contains [1,2].
randomSet.insert(2);

// getRandom should return either 1 or 2 randomly.
randomSet.getRandom();

// Removes 1 from the set, returns true. Set now contains [2].
randomSet.remove(1);

// 2 was already in the set, so return false.
randomSet.insert(2);

// Since 2 is the only number in the set, getRandom always return 2.
randomSet.getRandom();
//cpp

class RandomizedSet {
map<int,int> MAP;    
vector<int> VEC;
    
public:
    /** Initialize your data structure here. */
    RandomizedSet() {
        MAP.clear();
        VEC.clear();
        srand(time(NULL));
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        if(MAP.find(val) != MAP.end())
            return false;
        
        int ind = VEC.size();
        VEC.push_back(val);
        
        MAP.insert(pair<int,int>(val,ind));
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if(MAP.find(val) == MAP.end())
            return false;
        
        int ind = MAP.at(val);
        MAP.erase(val);
        
        int sz = VEC.size()-1;
        if(ind<sz){
            VEC[ind] = VEC[sz];
            MAP.at(VEC[ind]) = ind;
        }
        VEC.pop_back();
        return true;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        if(VEC.size() == 0)
            return -1;
        
        return VEC[rand()%VEC.size()];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
