Given a 2D board and a list of words from the dictionary, find all words in the board.

Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

 

Example:

Input: 
board = [
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
words = ["oath","pea","eat","rain"]

Output: ["eat","oath"]
 

Note:

All inputs are consist of lowercase letters a-z.
The values of words are distinct.


//cpp solution using Trie and DFS. (not my solution)
 
class Trie_node{
public:
    vector<Trie_node *> next;
    bool end;
    Trie_node()
    {
        next = std::vector<Trie_node *>(26,NULL);
        end = false;
    }
};

class Trie
{
public:
    Trie_node *root;
    Trie()
    {
        root = new Trie_node();
    }

    /** Inserts a word into the trie. */
    void insert(string &word) {
        Trie_node *node = root;
        for(char c : word)
        {
            if(node ->next[c - 'a'] == NULL)
                node ->next[c - 'a'] = new Trie_node();
            node = node ->next[c - 'a'];
        }
        node->end = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string &word) {
        Trie_node *node = root;
        for(char c : word)
        {
            if(node ->next[c - 'a'] == NULL)
                return false;
            node = node ->next[c - 'a'];
        }
        return (node->end == true);
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string &prefix) {
        Trie_node *node = root;
        for(char c : prefix)
        {
            if(node ->next[c - 'a'] == NULL)
                return false;
            node = node ->next[c - 'a'];
        }
        return true;
    }
};

class Solution{
public:
    Solution(){
        std::ios::sync_with_stdio(false);
        std::cin.tie(NULL);
        std::cout.tie(0);
    }
    void getposs(int i, int j, string &s, set<string> &ans, Trie *&T, vector<vector<char> > &board, vector<vector<bool> > &vis){
        if((i < 0) || (i >= board.size()) || (j < 0) || (j >= board[0].size()))
            return;
        if(vis[i][j])
            return;
        string newS = s + board[i][j];
        if(!(T->startsWith(newS)))
            return;
        vis[i][j] = true;
        if(T->search(newS))
            ans.insert(newS);
        getposs(i - 1, j, newS, ans, T, board, vis);
        getposs(i, j - 1, newS, ans, T, board, vis);
        getposs(i, j + 1, newS, ans, T, board, vis);
        getposs(i + 1, j, newS, ans, T, board, vis);
        vis[i][j] = false;
    }
    vector<string> findWords(vector<vector<char> >& board, vector<string>& words){
        Trie *T = new Trie();
        for(string s: words)
            T->insert(s);
        vector<vector<bool> > vis(board.size(), vector<bool>(board[0].size(), false));
        set<string> ans; 
        for(int i = 0; i < board.size(); i ++){
            for(int j = 0; j < board[0].size(); j ++){ 
                string s = "";        
                getposs(i, j, s, ans, T, board, vis);
            }
        }
        return vector<string>(ans.begin(), ans.end());
    }
};
