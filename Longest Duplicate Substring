//cpp my map solution (TIME LIMIT EXCEEDED!)

class Solution {
public:
    string longestDupSubstring(string S) {
        int sz = S.length();
        string ans = "";
        unordered_map<char,vector<string>> mp;
        unordered_map<string,int> mp_st;
        
        mp.insert({S[0],vector<string>{string(1,S[0])}});
        for(int i=1;i<sz;i++){
            vector<string> temp(mp.at(S[i-1]));
            mp[S[i]] = vector<string>{string(1,S[i])};
            
            for(auto st:temp){
                st = st+S[i];
                mp.at(S[i]).push_back(st);
                if(st.length()>ans.length()){
                    if(mp_st.find(st)!=mp_st.end()){
                            ans = st;
                    }else{
                        mp_st.insert({st,1});
                    }
                }
            }
        }
        
        return ans;
    }
};


//cpp binary search + Rabin-karp algorithm

#define ll long int
class Solution {
ll prime = INT_MAX / 26 / 26 * 26 - 1;  //very important // = 82595499
// order of 26 mod 82595499 is 11799354 > 50000, so this choice should result in minimum collision

int d = 26;
vector<ll> hash;
public:
    string rabinKarpSearch(string S,ll len){
        ll sz = S.length(),i;
        if(len == 0)
            return "";
        
        unordered_map<ll,vector<ll>> mp;
        long long current_hash = 0;
        
        for(i=0;i<len;i++){
            current_hash = (current_hash * d + (S[i]-'a'))%prime;
        }
        
        mp.insert({current_hash,vector<ll>{0}});
        
        for(i=len;i<sz;i++){
            current_hash = (current_hash - (long long)((S[i-len]-'a')*hash[len-1]))%prime;
            current_hash = (current_hash+prime)%prime;
            current_hash = (current_hash*d + (S[i]-'a'))%prime;
            // cout<<len<<" ";
            if(mp.find(current_hash) == mp.end()){
                mp.insert({current_hash,vector<ll>{i-len+1}});
            }else{
                for(auto j: mp.at(current_hash)){
                    string s1 = S.substr(j,len);
                    string s2 = S.substr(i-len+1,len);
                    // cout<<s1<<endl;
                    if(s1.compare(s2) == 0){
                        cout<<s1<<endl;
                        return s1;
                    }
                    
                    mp.at(current_hash).push_back(i-len+1);
                }
            }
        }
        
        return "";
    }
    string longestDupSubstring(string S) {
        ll sz = S.length();
        string ans = "";
        if(sz<2) return ans;
        
        hash = vector<ll>(sz,1);
        for (int i = 1 ; i < sz; i++) {
            hash[i] = (hash[i - 1] * d) % prime;
        }
        
        ll l=0,r=sz-1,mid;
        
        while(l<=r){
            mid = (l+r)/2;
            
            string tmp = rabinKarpSearch(S,mid);
            if(tmp.length() == 0){
                r = mid-1;
            }else{
                if(tmp.length()>ans.length()){
                    ans = tmp;
                }
                
                l = mid+1;
            }
        }
        
        return ans;
        
    }
};
