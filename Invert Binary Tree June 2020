Invert a binary tree.

//c++ solution both DFS(postorder) and BFS

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void postOrder(TreeNode* pNode){
        if(pNode == NULL)
            return;
        
        postOrder(pNode->left);
        postOrder(pNode->right);
        
        TreeNode* temp = pNode->left;
        pNode->left = pNode->right;
        pNode->right =temp;
        
        return;
    }
    void bfs(TreeNode* root){
        if(root == NULL)
            return;
        
        queue<TreeNode* > que; 
        que.push(root);
        
        while(!que.empty()){
            TreeNode* curN= que.front();
            que.pop();   
            
            TreeNode* temp = curN->left;
            curN->left = curN->right;
            curN->right = temp;

            if(curN->left != NULL)
                que.push(curN->left);
            
            if(curN->right != NULL)
                que.push(curN->right);
        }
        
        return;
    }
    
    TreeNode* invertTree(TreeNode* root) {
        postOrder(root);
        
        return root;
    }
};
