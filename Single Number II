Given a non-empty array of integers, every element appears three times except for one, which appears exactly once. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,3,2]
Output: 3
Example 2:

Input: [0,1,0,1,0,1,99]
Output: 99

//cpp O(n*logn) solution

class Solution {
public:
    int singleNumber(vector<int>& n) {
        long ans=0,sum1=0;
        set<int> s(n.begin(),n.end());
        ans = accumulate(n.begin(),n.end(),(long)0);
        sum1 = accumulate(s.begin(),s.end(),(long)0);
        
        return (3*sum1-ans)/2;
    }
};

//bitwise solution O(n)

class Solution {
public:
    int singleNumber(vector<int>& n) {
        int ones=0,twos=0,threes;
        
        for(auto v:n){
            twos = twos | (ones & v);
            ones ^= v;
            threes = ~(ones & twos);
            ones &= threes;
            twos &= threes;
        }
        
        return ones;
    }
};
